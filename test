def select_subgraph(G, selected_nodes_list):
    import networkx as nx

    selected_tree = []
    selected_preorder_nodes = []
    selected_postorder_nodes = []
    selected_labeled_edges = []

    graph_nodes = set(G.nodes)

    def find_related_nodes(query):
        words = query.lower().replace("â€™", "'").split()
        candidates = [node for node in graph_nodes if all(word in node.lower() for word in words)]
        if candidates:
            return candidates
        # fallback: match on any one word
        candidates = [node for node in graph_nodes if any(word in node.lower() for word in words)]
        return candidates

    for query in selected_nodes_list:
        matched_nodes = find_related_nodes(query)
        if not matched_nodes:
            print(f"Warning: No match for '{query}'")
            continue
        for matched in matched_nodes:
            try:
                selected_tree.append(list(nx.dfs_tree(G, source=matched, depth_limit=3)))
                selected_preorder_nodes.append(list(nx.dfs_preorder_nodes(G, source=matched, depth_limit=3)))
                selected_postorder_nodes.append(list(nx.dfs_postorder_nodes(G, source=matched, depth_limit=3)))
                selected_labeled_edges.append(list(nx.dfs_labeled_edges(G, source=matched, depth_limit=3)))
            except Exception as e:
                print(f"Error traversing from node '{matched}': {e}")

    return selected_tree, selected_preorder_nodes, selected_postorder_nodes, selected_labeled_edges
