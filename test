import streamlit as st
import requests
import os

API_BASE_URL = "http://127.0.0.1:8080"

st.set_page_config(page_title="RAG App", layout="wide")
st.markdown("<h1 style='text-align: center;'>RAG Chat Interface</h1>", unsafe_allow_html=True)

# Initialize session state
if "messages" not in st.session_state:
    st.session_state.messages = []

if "retrieved_docs" not in st.session_state:
    st.session_state.retrieved_docs = []

col1, col2, col3 = st.columns([1, 2, 1])

# LEFT PANEL
with col1:
    st.subheader("1. Upload Document")
    uploaded_file = st.file_uploader("Upload a file (pdf, txt, docx)", type=["pdf", "txt", "docx"])
    chunking_type = st.selectbox("Select Chunking Type", ["recursive", "semantic"])
    index_id_upload = st.text_input("Index ID for Upload", value="df101")

    if uploaded_file:
        with open(uploaded_file.name, "wb") as f:
            f.write(uploaded_file.getbuffer())
        document_path = os.path.abspath(uploaded_file.name)

        if st.button("Upload and Chunk"):
            try:
                payload = {
                    "document_path": document_path,
                    "chunking_type": chunking_type,
                    "index_id": index_id_upload
                }
                response = requests.post(f"{API_BASE_URL}/upload/documents", json=payload)
                if response.status_code == 200:
                    st.success("Document uploaded and chunked successfully!")
                else:
                    st.error(f"Upload failed: {response.text}")
            except Exception as e:
                st.error(f"Error: {e}")

    st.markdown("---")
    st.subheader("2. Settings")
    faiss_index_id = st.text_input("Faiss Index ID", value="df101")

    model_options = {
        "3": {"name": "OpenAI GPT-4.0", "logo": "app/svg/openai-svgrepo-com.svg"},
        "1": {"name": "Other Model", "logo": "https://via.placeholder.com/48x40.png?text=AI"}
    }

    selected_model_id = st.selectbox("Model ID", options=list(model_options.keys()), format_func=lambda x: model_options[x]["name"])
    st.image(model_options[selected_model_id]["logo"], width=50, caption=model_options[selected_model_id]["name"])

    top_k = st.slider("Top K Docs", 1, 10, 5)

# CENTER PANEL
with col2:
    st.subheader("Chat")

    # Chat Display (messages rendered above input)
    for msg in reversed(st.session_state.messages):
        if msg["role"] == "user":
            st.markdown(
                f"""
                <div style='text-align: right; margin: 5px 0;'>
                    <div style='display: inline-block; background-color: #FF6B6B; color: white; padding: 10px 15px; border-radius: 20px; max-width: 80%;'>
                        <strong>You:</strong> {msg['content']}
                    </div>
                </div>
                """,
                unsafe_allow_html=True
            )
        else:
            st.markdown(
                f"""
                <div style='text-align: left; margin: 5px 0;'>
                    <div style='display: inline-block; background-color: #E0E0E0; color: black; padding: 10px 15px; border-radius: 20px; max-width: 80%;'>
                        <strong>Assistant:</strong> {msg['content']}
                    </div>
                </div>
                """,
                unsafe_allow_html=True
            )

    # Chat Input Box (fixed below messages)
    user_input = st.chat_input("Type your question here...")
    if user_input:
        st.session_state.messages.append({"role": "user", "content": user_input})
        st.session_state.messages.append({"role": "assistant", "content": "Waiting for response..."})

        payload = {
            "query": user_input,
            "top_k": top_k,
            "index_id": faiss_index_id,
            "generative_model_id": selected_model_id
        }

        with st.spinner("Generating response..."):
            try:
                response = requests.post(f"{API_BASE_URL}/retrieve_and_generate", json=payload)
                if response.status_code == 200:
                    result = response.json()
                    answer = result.get("generated_response", "No response.")
                    st.session_state.messages[-1]["content"] = answer
                    st.session_state.retrieved_docs = result.get("retrieved_documents", [])
                else:
                    st.session_state.messages[-1]["content"] = f"**Error:** {response.text}"
            except Exception as e:
                st.session_state.messages[-1]["content"] = f"**Exception:** {str(e)}"

# RIGHT PANEL
with col3:
    st.subheader("Retrieved Documents")

    for doc in st.session_state.retrieved_docs:
        st.markdown(
            f"""
            <div style='background-color: #F5F5DC; padding: 15px; border-radius: 12px; margin-bottom: 15px;'>
                <div style='background-color: #FF4B4B; color: white; padding: 5px 10px; border-radius: 10px; display: inline-block; margin-bottom: 5px;'>
                    <strong>Page:</strong> {doc['page']}
                </div>
                <div style='background-color: #D1A7FF; color: white; padding: 5px 10px; border-radius: 10px; display: inline-block; margin-bottom: 10px;'>
                    <strong>Source:</strong> {doc['source']}
                </div>
                <div style='background-color: #F9F9F9; color: black; padding: 10px; border-radius: 8px;'>
                    {doc['content']}
                </div>
            </div>
            """,
            unsafe_allow_html=True
        )
