import pandas as pd
from typing import List, Dict, Any

def enrich_df_images_with_llm_from_tuple(
    df: pd.DataFrame,
    content_col: str = "content",
    max_workers: int = 10,
    batch_size: int = 5
) -> pd.DataFrame:
    """
    For each row in df[content_col]:
      - If it's a tuple ('image', base64), send base64 to LLM and replace with ('image', LLM_output).
      - If it's any other type (e.g., ('table', data)), leave unchanged.
    
    Returns a new DataFrame with updated tuples in `content_col`.
    """
    df_out = df.copy()

    llm_batcher = BatchedLLMInvoker(max_workers=max_workers)

    payloads: List[Dict[str, Any]] = []
    row_map: List[int] = []

    # Collect payloads for only 'image' tuples
    for idx, cell in df_out[content_col].items():
        if isinstance(cell, tuple) and len(cell) == 2 and cell[0] == "image" and isinstance(cell[1], str):
            payloads.append({"input_nodes": {"base_64_encoded_image": cell[1]}})
            row_map.append(idx)

    # If no image tuples found, return as is
    if not payloads:
        return df_out

    # Invoke LLM
    results: List[str] = llm_batcher.invoke_batch(payloads, batch_size=batch_size)

    # Replace in DataFrame
    for idx, output in zip(row_map, results):
        df_out.at[idx, content_col] = ("image", output)

    return df_out
