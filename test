import streamlit as st
import requests
import os

API_BASE_URL = "http://localhost:8000"  # Change this to your actual FastAPI server URL

st.set_page_config(page_title="LangGraph RAG App", layout="wide")
st.title("LangGraph Powered RAG App")

# Upload Section
st.header("1. Upload Document")

uploaded_file = st.file_uploader("Upload a file (pdf, txt, docx)", type=["pdf", "txt", "docx"])
index_id = st.text_input("Index ID", value="my-index")
chunking_type = st.selectbox("Select Chunking Type", ["simple", "semantic", "custom"])
document_path = None

if uploaded_file:
    with open(uploaded_file.name, "wb") as f:
        f.write(uploaded_file.getbuffer())
    document_path = os.path.abspath(uploaded_file.name)

if st.button("Upload and Chunk Document"):
    if document_path and index_id:
        request_payload = {
            "document_path": document_path,
            "chunking_type": chunking_type,
            "index_id": index_id
        }
        response = requests.post(f"{API_BASE_URL}/upload/documents", json=request_payload)

        if response.status_code == 200:
            st.success("Document uploaded and chunked successfully!")
        else:
            st.error(f"Failed to upload document: {response.text}")
    else:
        st.warning("Upload a document and provide an index ID.")

# Retrieval Section
st.header("2. Ask a Question")

query = st.text_input("Enter your question")
top_k = st.slider("Number of documents to retrieve", 1, 10, 3)

if st.button("Generate Answer"):
    if query and index_id:
        request_payload = {
            "query": query,
            "top_k": top_k,
            "index_id": index_id
        }
        response = requests.post(f"{API_BASE_URL}/retrieve_and_generate", json=request_payload)

        if response.status_code == 200:
            result = response.json()
            st.subheader("Answer")
            st.write(result["generated_response"])

            st.subheader("Retrieved Documents")
            for doc in result["retrieved_documents"]:
                st.markdown(f"**Page {doc['page']} | Source: {doc['source']}**")
                st.write(doc["content"])
                st.markdown("---")
        else:
            st.error(f"Failed to generate response: {response.text}")
    else:
        st.warning("Please enter a question and index ID.")
