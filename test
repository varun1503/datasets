from docx.table import Table as DocxTable

class TableParser:
    def __init__(self):
        self.merged_cells_tracker = {}

    def get_cell_text(self, cell):
        """
        Extracts clean text from a docx cell, joining paragraphs.
        """
        paragraphs = cell._tc.findall('.//w:p', namespaces={'w': 'http://schemas.openxmlformats.org/wordprocessingml/2006/main'})
        texts = []
        for p in paragraphs:
            texts.extend([t.text for t in p.iter() if t.text])
        return ' '.join([t.strip() for t in texts if t.strip()])

    def parse_with_merged_cells(self, table: DocxTable):
        """
        Parses a docx table and handles vertical merged cells (vMerge).
        Returns a list of rows without enforcing fixed column lengths.
        """
        parsed_rows = []
        for row in table.rows:
            row_data = []
            for col_idx, cell in enumerate(row.cells):
                tc = cell._tc
                tcPr = tc.tcPr
                vmerge = tcPr.vMerge if tcPr is not None and tcPr.vMerge is not None else None

                if vmerge is not None:
                    val = vmerge.val
                    if val is None or val == 'continue':
                        # Continue merged value from above
                        row_data.append(self.merged_cells_tracker.get(col_idx, ""))
                    else:  # 'restart'
                        cell_text = self.get_cell_text(cell)
                        self.merged_cells_tracker[col_idx] = cell_text
                        row_data.append(cell_text)
                else:
                    cell_text = self.get_cell_text(cell)
                    self.merged_cells_tracker[col_idx] = cell_text
                    row_data.append(cell_text)

            if any(cell.strip() for cell in row_data):  # Avoid appending blank rows
                parsed_rows.append(row_data)

        return parsed_rows
