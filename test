import numpy as np
import psycopg2
from sentence_transformers import SentenceTransformer
from typing import List, Dict

# Step 1: Initialize the BERT model
class EmbeddingModel:
    def __init__(self, model_name: str = "all-MiniLM-L6-v2"):
        self.model = SentenceTransformer(model_name)

    def get_embedding(self, text: str) -> np.ndarray:
        return self.model.encode(text)

    def get_embeddings(self, texts: List[str]) -> np.ndarray:
        return self.model.encode(texts)

# Step 2: Initialize the PostgreSQL connection
class PgVectorDatabase:
    def __init__(self, dbname: str, user: str, password: str, host: str = "localhost", port: str = "5432"):
        self.conn = psycopg2.connect(
            dbname=dbname,
            user=user,
            password=password,
            host=host,
            port=port
        )
        self.cursor = self.conn.cursor()
        print("Database connection established!")

    def create_table(self, table_name: str, vector_dim: int):
        """
        Create a table to store text, embeddings, and metadata.
        """
        create_table_query = f"""
        CREATE TABLE IF NOT EXISTS {table_name} (
            id SERIAL PRIMARY KEY,
            text TEXT NOT NULL,
            embedding VECTOR({vector_dim}) NOT NULL,
            metadata JSONB NOT NULL
        );
        """
        self.cursor.execute(create_table_query)
        self.conn.commit()
        print(f"Table '{table_name}' created successfully!")

    def create_index(self, table_name: str, index_name: str):
        """
        Create an index on the embedding column to improve similarity search performance.
        """
        create_index_query = f"""
        CREATE INDEX IF NOT EXISTS {index_name}
        ON {table_name} USING ivfflat (embedding)
        WITH (lists = 100);
        """
        self.cursor.execute(create_index_query)
        self.conn.commit()
        print(f"Index '{index_name}' created successfully on table '{table_name}'!")

    def insert_document(self, table_name: str, text: str, embedding: np.ndarray, metadata: Dict):
        """
        Insert a document with embedding and metadata into the database.
        """
        insert_query = f"""
        INSERT INTO {table_name} (text, embedding, metadata)
        VALUES (%s, %s, %s);
        """
        self.cursor.execute(insert_query, (text, embedding.tolist(), metadata))
        self.conn.commit()
        print(f"Document inserted: {text[:30]}...")

    def fetch_similar_documents(self, table_name: str, embedding: np.ndarray, top_n: int = 5):
        """
        Fetch top N similar documents based on embedding similarity.
        """
        fetch_query = f"""
        SELECT text, metadata
        FROM {table_name}
        ORDER BY embedding <-> %s
        LIMIT %s;
        """
        self.cursor.execute(fetch_query, (embedding.tolist(), top_n))
        return self.cursor.fetchall()

    def close_connection(self):
        """
        Close the connection to the database.
        """
        self.cursor.close()
        self.conn.close()
        print("Database connection closed!")

# Step 3: Define documents
class Document:
    def __init__(self, page_content: str, metadata: Dict):
        self.page_content = page_content
        self.metadata = metadata

documents = [
    Document(
        page_content="there are cats in the pond",
        metadata={"id": 1, "location": "pond", "topic": "animals"},
    ),
    Document(
        page_content="ducks are also found in the pond",
        metadata={"id": 2, "location": "pond", "topic": "animals"},
    ),
    Document(
        page_content="fresh apples are available at the market",
        metadata={"id": 3, "location": "market", "topic": "food"},
    ),
    Document(
        page_content="the market also sells fresh oranges",
        metadata={"id": 4, "location": "market", "topic": "food"},
    ),
    Document(
        page_content="the new art exhibit is fascinating",
        metadata={"id": 5, "location": "museum", "topic": "art"},
    ),
    Document(
        page_content="a sculpture exhibit is also at the museum",
        metadata={"id": 6, "location": "museum", "topic": "art"},
    ),
    Document(
        page_content="a new coffee shop opened on Main Street",
        metadata={"id": 7, "location": "Main Street", "topic": "food"},
    ),
    Document(
        page_content="the book club meets at the library",
        metadata={"id": 8, "location": "library", "topic": "reading"},
    ),
    Document(
        page_content="the library hosts a weekly story time for kids",
        metadata={"id": 9, "location": "library", "topic": "reading"},
    ),
    Document(
        page_content="a cooking class for beginners is offered at the community center",
        metadata={"id": 10, "location": "community center", "topic": "classes"},
    ),
]

# Step 4: Main function to process documents
if __name__ == "__main__":
    # Initialize the embedding model
    embedding_model = EmbeddingModel()

    # Initialize the database connection
    db = PgVectorDatabase(
        dbname="embeddings_db",
        user="your_user",
        password="your_password",
        host="localhost",
        port="5432"
    )

    table_name = "document_embeddings"
    vector_dim = 384  # Dimension of the BERT embedding model

    # Create table and index
    db.create_table(table_name, vector_dim)
    db.create_index(table_name, "embedding_index")

    # Insert documents into the database
    for doc in documents:
        embedding = embedding_model.get_embedding(doc.page_content)
        db.insert_document(table_name, doc.page_content, embedding, doc.metadata)

    # Query the database with a new text
    query = "What animals are found in the pond?"
    query_embedding = embedding_model.get_embedding(query)

    # Retrieve top similar documents
    results = db.fetch_similar_documents(table_name, query_embedding, top_n=3)
    print("\nTop Similar Documents:")
    for result in results:
        print(f"Text: {result[0]}, Metadata: {result[1]}")

    # Close the database connection
    db.close_connection()
