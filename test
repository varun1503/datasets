from docx import Document
from docx.oxml.ns import qn
from docx.text.paragraph import Paragraph
import os
import base64
import uuid

NSMAP = {
    'w': 'http://schemas.openxmlformats.org/wordprocessingml/2006/main',
    'a': 'http://schemas.openxmlformats.org/drawingml/2006/main',
    'r': 'http://schemas.openxmlformats.org/officeDocument/2006/relationships'
}

def generate_id():
    return str(uuid.uuid4())

def encode_image(image_path):
    with open(image_path, "rb") as img_file:
        return base64.b64encode(img_file.read()).decode("utf-8")

def get_cell_text(cell):
    paragraphs = [Paragraph(p, None).text.strip() for p in cell.findall('.//w:p', namespaces=NSMAP)]
    return ' '.join(p for p in paragraphs if p)

def is_heading(paragraph):
    texts = [run.text for run in paragraph.runs if run.text.strip()]
    bold = any(run.bold for run in paragraph.runs)
    font_size = max((run.font.size.pt for run in paragraph.runs if run.font.size), default=0)
    starts_like_heading = any(text.strip().startswith(tuple(str(i) for i in range(1, 10))) for text in texts)
    return bold and font_size >= 11 and starts_like_heading

def extract_ordered_docx_content(file_path, model_caller, model_index="3", image_output_dir="output_images", save_images=True):
    doc = Document(file_path)
    body = doc._element.body
    ordered_content = []
    current_heading = None
    heading_stack = []

    if save_images:
        os.makedirs(image_output_dir, exist_ok=True)

    for child in body.iterchildren():
        tag = child.tag

        # --- Paragraph (text or heading or with image) ---
        if tag == qn('w:p'):
            para = Paragraph(child, doc)
            text = para.text.strip()
            if not text:
                continue

            if is_heading(para):
                level = 1
                try:
                    # Use style Heading1, Heading2 if possible
                    level = int(para.style.name.replace("Heading", ""))
                except:
                    pass
                current_heading = {"text": text, "level": level}
                heading_stack = [current_heading]
                ordered_content.append({
                    "type": "heading",
                    "text": text,
                    "level": level
                })
            else:
                ordered_content.append({
                    "type": "paragraph",
                    "text": text,
                    "under_heading": current_heading["text"] if current_heading else None
                })

            # --- Embedded image(s) in paragraph ---
            for drawing in child.findall('.//w:drawing', namespaces=NSMAP):
                blip = drawing.find('.//a:blip', namespaces=NSMAP)
                if blip is not None:
                    r_embed = blip.attrib.get(qn('r:embed'))
                    image_part = doc.part.related_parts.get(r_embed)
                    if image_part:
                        content_type = image_part.content_type
                        ext = content_type.split('/')[-1].lower()
                        if ext == "emf":
                            continue
                        image_id = generate_id()
                        image_label = f"Image_{image_id[:8]}"
                        image_path = os.path.join(image_output_dir, f"{image_label}.{ext}")
                        if save_images:
                            with open(image_path, "wb") as f:
                                f.write(image_part.blob)
                        base64_image = encode_image(image_path)
                        prompt_template = Prompt().image_insight_prompt()
                        input_nodes = {"base64_encoded_image": base64_image}
                        llm_output = model_caller.model_call(model_index, prompt_template, input_nodes)
                        ordered_content.append({
                            "type": "image",
                            "label": image_label,
                            "image_context": llm_output,
                            "under_heading": current_heading["text"] if current_heading else None
                        })

        # --- Table ---
        elif tag == qn('w:tbl'):
            table_data = []
            rows = child.findall('.//w:tr', namespaces=NSMAP)
            for row in rows:
                cells = row.findall('.//w:tc', namespaces=NSMAP)
                row_data = [get_cell_text(cell) for cell in cells]
                table_data.append(row_data)
            ordered_content.append({
                "type": "table",
                "data": table_data,
                "under_heading": current_heading["text"] if current_heading else None
            })

    return ordered_content
