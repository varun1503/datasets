import streamlit as st
import requests
import os

API_BASE_URL = "http://127.0.0.1:8080"  # Change to your actual API

st.set_page_config(page_title="RAG App", layout="wide")
st.markdown("<h1 style='text-align: center;'>RAG Chat Interface</h1>", unsafe_allow_html=True)

# Initialize chat history
if "messages" not in st.session_state:
    st.session_state.messages = []

# ----------------------------------
# LAYOUT: Three Columns
# ----------------------------------
col1, col2, col3 = st.columns([1, 2, 1])

# ------------
# LEFT PANEL
# ------------
with col1:
    st.subheader("Settings")

    faiss_index_id = st.text_input("Faiss Index ID", value="df101")

    st.markdown("### Model")
    model_options = {
        "3": {"name": "OpenAI GPT-4.0", "logo": "https://upload.wikimedia.org/wikipedia/commons/0/04/OpenAI_Logo.svg"},
        "1": {"name": "Other Model", "logo": "https://via.placeholder.com/40x40.png?text=AI"}
    }
    selected_model_id = st.selectbox("Model ID", options=list(model_options.keys()), format_func=lambda x: model_options[x]["name"])

    st.image(model_options[selected_model_id]["logo"], width=50, caption=model_options[selected_model_id]["name"])

    top_k = st.slider("Top K Docs", 1, 10, 5)

# ------------
# CENTER PANEL (CHAT)
# ------------
with col2:
    st.subheader("Chat")

    # Dummy buttons
    st.markdown("##### Ask a question")
    dummy_qs = ["Which tools do you have access to?", "Tell me about yourself", "What's your special skill?"]
    selected_q = st.selectbox("Quick prompts", options=dummy_qs)

    user_input = st.chat_input("Type your question here...")

    if user_input:
        st.session_state.messages.append({"role": "user", "content": user_input})
        try:
            payload = {
                "query": user_input,
                "top_k": top_k,
                "index_id": faiss_index_id,
                "generative_model_id": selected_model_id
            }

            response = requests.post(f"{API_BASE_URL}/retrieve_and_generate", json=payload)

            if response.status_code == 200:
                result = response.json()
                answer = result.get("generated_response", "No response.")
                st.session_state.messages.append({"role": "assistant", "content": answer})

                # Store retrieved docs for display
                st.session_state.retrieved_docs = result.get("retrieved_documents", [])

            else:
                st.error(f"Server error: {response.text}")

        except Exception as e:
            st.error(f"Request failed: {e}")

    # Display chat
    for msg in st.session_state.messages:
        if msg["role"] == "user":
            st.markdown(f"**You:** {msg['content']}")
        else:
            st.markdown(f"**Assistant:** {msg['content']}")

# ------------
# RIGHT PANEL (DOCS)
# ------------
with col3:
    st.subheader("Retrieved Documents")
    if "retrieved_docs" in st.session_state:
        for doc in st.session_state.retrieved_docs:
            st.markdown(f"**Page {doc['page']} | Source: {doc['source']}**")
            st.write(doc["content"])
            st.markdown("---")
