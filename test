with col2:
    st.subheader("Chat")

    # Initialize message history if not exists
    if "messages" not in st.session_state:
        st.session_state.messages = []

    # Input box at bottom of chat
    user_input = st.chat_input("Type your question here...")

    if user_input:
        # Append user message
        st.session_state.messages.append({"role": "user", "content": user_input})

        # Prepare request payload
        payload = {
            "query": user_input,
            "top_k": st.session_state.top_k,
            "index_id": st.session_state.index_id,
            "generative_model_id": st.session_state.model_id
        }

        # Send request to API
        with st.spinner("Generating response..."):
            try:
                response = requests.post(f"{API_BASE_URL}/retrieve_and_generate", json=payload)
                if response.status_code == 200:
                    result = response.json()
                    answer = result.get("generated_response", "No response.")
                    st.session_state.messages.append({"role": "assistant", "content": answer})
                    st.session_state.retrieved_docs = result.get("retrieved_documents", [])
                else:
                    st.error(f"Server error: {response.text}")
            except Exception as e:
                st.error(f"Request failed: {e}")

    # Display chat history (latest first)
    for msg in reversed(st.session_state.messages):
        if msg["role"] == "user":
            st.markdown(f"**You:** {msg['content']}")
        else:
            st.markdown(f"**Assistant:** {msg['content']}")
