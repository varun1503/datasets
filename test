from docx import Document
from docx.oxml.ns import qn
from docx.text.paragraph import Paragraph
import os

# WordprocessingML namespace
NSMAP = {'w': 'http://schemas.openxmlformats.org/wordprocessingml/2006/main'}

def get_cell_text(cell):
    """Extracts clean text from a table cell (avoiding duplicated values)."""
    paragraphs = [Paragraph(p, None).text.strip() for p in cell.findall('.//w:p', namespaces=NSMAP)]
    return ' '.join(p for p in paragraphs if p)

def extract_ordered_docx_content(file_path, save_images=False, image_output_dir='images'):
    doc = Document(file_path)
    body = doc._element.body
    ordered_content = []
    image_count = 0
    current_heading = None

    # Prepare image directory
    if save_images:
        os.makedirs(image_output_dir, exist_ok=True)

    # Build a mapping from XML element to paragraph
    para_lookup = {p._element: p for p in doc.paragraphs if p.text and p.text.strip()}

    for child in body.iterchildren():
        tag = child.tag

        # -------- Paragraph --------
        if tag == qn('w:p'):
            para = para_lookup.get(child)
            if para:
                text = para.text.strip()
                style = para.style.name if para.style else ""

                # Detect headings
                if style.startswith("Heading"):
                    current_heading = {'type': 'heading', 'text': text, 'level': style}
                    ordered_content.append(current_heading)
                else:
                    ordered_content.append({
                        'type': 'paragraph',
                        'text': text,
                        'under_heading': current_heading['text'] if current_heading else None
                    })

        # -------- Table --------
        elif tag == qn('w:tbl'):
            table_data = []
            rows = child.findall('.//w:tr', namespaces=NSMAP)
            for row in rows:
                cells = row.findall('.//w:tc', namespaces=NSMAP)
                row_data = []
                for cell in cells:
                    clean_text = get_cell_text(cell)
                    row_data.append(clean_text)
                table_data.append(row_data)

            ordered_content.append({
                'type': 'table',
                'data': table_data,
                'under_heading': current_heading['text'] if current_heading else None
            })

    # -------- Images --------
    for rel in doc.part._rels.values():
        if "image" in rel.target_ref:
            image_count += 1
            image_label = f"Image_{image_count}"

            if save_images:
                ext = rel.target_ref.split('.')[-1]
                image_path = os.path.join(image_output_dir, f"{image_label}.{ext}")
                with open(image_path, "wb") as f:
                    f.write(rel.target_part.blob)

            ordered_content.append({
                'type': 'image',
                'label': image_label,
                'under_heading': current_heading['text'] if current_heading else None
            })

    return ordered_content
content = extract_ordered_docx_content("your_file.docx", save_images=False)

for item in content:
    if item['type'] == 'heading':
        print(f"\n[HEADING: {item['level']}] {item['text']}")
    elif item['type'] == 'paragraph':
        print(f"  [PARAGRAPH under: {item['under_heading']}] {item['text']}")
    elif item['type'] == 'table':
        print(f"  [TABLE under: {item['under_heading']}]")
        for row in item['data']:
            print("    ", row)
    elif item['type'] == 'image':
        print(f"  [IMAGE under: {item['under_heading']}] Label: {item['label']}")
