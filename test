import pandas as pd
import json, ast, re
import numpy as np

def add_section_from_retrieved(
    df: pd.DataFrame,
    column: str = "retrieved_results",
    out_num: str = "Section number",
    out_name: str = "sections",
    make_combined: bool = True,   # also create "Section" with "<num>\t<name>"
) -> pd.DataFrame:
    """
    From df[column] (JSON/list with dicts), take ONLY the first item and extract:
      - out_num: numeric prefix from heading (e.g., '7', '7.5', '1.2.3')
      - out_name: subheading if present else heading text (number stripped)
    """

    def parse_first_item(cell):
        # convert string -> py object if needed
        data = cell
        if isinstance(cell, str):
            try:
                data = json.loads(cell)
            except Exception:
                try:
                    data = ast.literal_eval(cell)
                except Exception:
                    data = []
        # take first dict
        item = data[0] if isinstance(data, list) and data else (data if isinstance(data, dict) else {})
        heading = str(item.get("heading", "") or "").strip()
        sub = str(item.get("subheading", "") or "").strip()
        if sub.lower() in {"none", "null"}:
            sub = ""

        # split heading into number + name
        # matches: "7 Title", "7.5 Title", "1.2.3. Title"
        m = re.match(r'^\s*([0-9]+(?:\.[0-9]+)*)\.?\s*(.*)$', heading)
        if m:
            num = m.group(1)
            heading_name = m.group(2).strip()
        else:
            num = ""
            heading_name = heading

        # choose section name
        name = sub if sub else heading_name
        return pd.Series({out_num: num, out_name: name})

    out = df.copy()
    out[[out_num, out_name]] = out[column].apply(parse_first_item)

    if make_combined:
        out["Section"] = np.where(
            (out[out_num].astype(str).str.strip() != "") & (out[out_name].astype(str).str.strip() != ""),
            out[out_num].astype(str) + "\t" + out[out_name].astype(str),
            out[out_num].astype(str) + out[out_name].astype(str)
        )

    return out
