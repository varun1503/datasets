from docx import Document
from docx.oxml.ns import qn
from docx.text.paragraph import Paragraph
import os
import base64

# WordprocessingML namespace
NSMAP = {'w': 'http://schemas.openxmlformats.org/wordprocessingml/2006/main'}

def get_cell_text(cell):
    paragraphs = [Paragraph(p, None).text.strip() for p in cell.findall('.//w:p', namespaces=NSMAP)]
    return ' '.join(p for p in paragraphs if p)

def encode_image_base64(image_blob):
    return base64.b64encode(image_blob).decode("utf-8")

def extract_ordered_docx_content_with_insights(file_path, model_caller, model_index, prompt_template):
    doc = Document(file_path)
    body = doc._element.body
    ordered_content = []
    image_count = 0

    para_lookup = {
        p._element: p.text.strip()
        for p in doc.paragraphs
        if p.text and p.text.strip()
    }

    for child in body.iterchildren():
        tag = child.tag

        # Paragraph
        if tag == qn('w:p'):
            para_text = para_lookup.get(child, "")
            if para_text:
                ordered_content.append(('paragraph', para_text))

        # Table
        elif tag == qn('w:tbl'):
            table_data = []
            rows = child.findall('.//w:tr', namespaces=NSMAP)
            for row in rows:
                cells = row.findall('.//w:tc', namespaces=NSMAP)
                row_data = [get_cell_text(cell) for cell in cells]
                table_data.append(row_data)
            ordered_content.append(('table', table_data))

    # Image handling and insights
    for rel in doc.part._rels.values():
        if "image" in rel.target_ref:
            image_blob = rel.target_part.blob
            image_base64 = encode_image_base64(image_blob)
            
            # Prepare model input
            messages = [{
                "type": "text",
                "text": "You are a model risk validation expert. Describe the image."
            }, {
                "type": "image_url",
                "image_url": {
                    "url": f"data:image/png;base64,{image_base64}"
                }
            }]
            
            insight = model_caller.model_call(model_index, prompt_template, messages)
            ordered_content.append(('image', insight))

    return ordered_content
