import os
import base64
import uuid
from docx import Document
from docx.oxml.ns import qn
from docx.text.paragraph import Paragraph

NSMAP = {'w': 'http://schemas.openxmlformats.org/wordprocessingml/2006/main'}

def get_cell_text(cell):
    """Extract clean text from a table cell."""
    paragraphs = [Paragraph(p, None).text.strip() for p in cell.findall('.//w:p', namespaces=NSMAP)]
    return ' '.join(p for p in paragraphs if p)

def extract_images_from_run(run_element, doc_part):
    """Extract both drawing and VML images."""
    image_items = []

    # Drawing images (newer format)
    drawing_blips = run_element.findall('.//a:blip', namespaces={
        'a': 'http://schemas.openxmlformats.org/drawingml/2006/main',
        'r': 'http://schemas.openxmlformats.org/officeDocument/2006/relationships'
    })
    for blip in drawing_blips:
        embed_id = blip.get('{http://schemas.openxmlformats.org/officeDocument/2006/relationships}embed')
        if embed_id and embed_id in doc_part._rels:
            image_part = doc_part.related_parts[embed_id]
            if not image_part.content_type.endswith('emf'):
                image_items.append(image_part)

    # VML images (older format)
    pict_imagedatas = run_element.findall('.//v:imagedata', namespaces={
        'v': 'urn:schemas-microsoft-com:vml',
        'o': 'urn:schemas-microsoft-com:office:office',
        'r': 'http://schemas.openxmlformats.org/officeDocument/2006/relationships'
    })
    for imgdata in pict_imagedatas:
        embed_id = imgdata.get('{http://schemas.openxmlformats.org/officeDocument/2006/relationships}id')
        if embed_id and embed_id in doc_part._rels:
            image_part = doc_part.related_parts[embed_id]
            if not image_part.content_type.endswith('emf'):
                image_items.append(image_part)

    return image_items

def extract_ordered_docx_content_with_hierarchy(file_path, save_images=False, image_output_dir='images'):
    doc = Document(file_path)
    body = doc._element.body
    ordered_content = []
    image_count = 0
    heading_stack = []
    heading_map = {}

    if save_images:
        os.makedirs(image_output_dir, exist_ok=True)

    para_lookup = {p._element: p for p in doc.paragraphs if p.text.strip()}

    for child in body.iterchildren():
        tag = child.tag

        # -------- Paragraphs --------
        if tag == qn('w:p'):
            para = para_lookup.get(child)
            if not para:
                continue
            text = para.text.strip()
            style = para.style.name if para.style else ""

            # ---- Heading/Subheading detection ----
            if style.startswith("Heading"):
                heading_id = str(uuid.uuid4())
                level = int(style.replace("Heading ", "")) if style[-1].isdigit() else 1

                while heading_stack and heading_map[heading_stack[-1]]['level'] >= level:
                    heading_stack.pop()

                heading_data = {
                    'id': heading_id,
                    'type': 'heading',
                    'text': text,
                    'level': level,
                    'parent_id': heading_stack[-1] if heading_stack else None,
                    'child_ids': []
                }

                if heading_stack:
                    heading_map[heading_stack[-1]]['child_ids'].append(heading_id)

                heading_stack.append(heading_id)
                heading_map[heading_id] = heading_data
                ordered_content.append(heading_data)

            else:
                ordered_content.append({
                    'id': str(uuid.uuid4()),
                    'type': 'paragraph',
                    'text': text,
                    'parent_id': heading_stack[-1] if heading_stack else None,
                    'under_heading': heading_map[heading_stack[-1]]['text'] if heading_stack else None
                })

            # ---- Image in run ----
            for run in child.findall('.//w:r', namespaces=NSMAP):
                images = extract_images_from_run(run, doc.part)
                for image_part in images:
                    image_count += 1
                    label = f"Image_{image_count}"
                    ext = image_part.content_type.split('/')[-1]

                    if save_images:
                        path = os.path.join(image_output_dir, f"{label}.{ext}")
                        with open(path, 'wb') as f:
                            f.write(image_part.blob)

                    ordered_content.append({
                        'id': str(uuid.uuid4()),
                        'type': 'image',
                        'label': label,
                        'base64': base64.b64encode(image_part.blob).decode(),
                        'parent_id': heading_stack[-1] if heading_stack else None,
                        'under_heading': heading_map[heading_stack[-1]]['text'] if heading_stack else None
                    })

        # -------- Tables --------
        elif tag == qn('w:tbl'):
            table_data = []
            rows = child.findall('.//w:tr', namespaces=NSMAP)
            for row in rows:
                cells = row.findall('.//w:tc', namespaces=NSMAP)
                row_data = [get_cell_text(cell) for cell in cells]
                table_data.append(row_data)

            ordered_content.append({
                'id': str(uuid.uuid4()),
                'type': 'table',
                'data': table_data,
                'parent_id': heading_stack[-1] if heading_stack else None,
                'under_heading': heading_map[heading_stack[-1]]['text'] if heading_stack else None
            })

    return ordered_content
