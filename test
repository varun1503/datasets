from typing import List, Tuple, Union

KG_TRIPLE_DELIMITER = "\n"  # Adjust if needed

class CreateGpickleFile:
    def parse_triples(self, response, delimiter=KG_TRIPLE_DELIMITER) -> List[List[str]]:
        if not response or not response.content:
            return []
        # Assume each chunk is separated by two newlines
        chunks = response.content.strip().split("\n\n")
        return [chunk.strip().split(delimiter) for chunk in chunks]

    def extract_communities(self, triplets: List[List[str]]) -> Tuple[List[List[Union[str, List[str]]]], List[List[str]]]:
        communities = []
        triples = []

        for chunk in triplets:  # Each chunk is a list of triple strings
            chunk_communities = []
            chunk_triples = []
            for entry in chunk:
                entry = entry.strip("()")
                parts = [p.strip() for p in entry.split(",")]
                if len(parts) < 2:
                    continue  # Skip malformed
                community_raw = parts[0]
                community_split = community_raw.split("and")
                chunk_communities.append(community_split if len(community_split) > 1 else community_raw)
                triple = parts[1:]
                chunk_triples.append("|".join(triple))  # Join with '|'
            communities.append(chunk_communities)
            triples.append(chunk_triples)

        return communities, triples
