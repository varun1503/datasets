import os
import pandas as pd
from typing import Optional
from docx import Document
from docx.shared import Pt
from docx.enum.text import WD_ALIGN_PARAGRAPH

def _bold_run(p, text, size=11):
    r = p.add_run(text)
    r.bold = True
    r.font.size = Pt(size)
    return r

def build_simple_template(
    df: pd.DataFrame,
    model: str,
    impact: str,
    scope: str = "",
    save_dir: str = "base",
    *,
    question_col: str = "IMVP Question",
    sections_col: str = "sections",
    mrmg_col: str = "mrmg_answer",
    heading_col: Optional[str] = None,   # set to your heading column if you have one
    blank_lines_under_mtr: int = 2       # how much empty space under "Modelling Team Response"
) -> str:
    """
    Builds a DOCX with, per row:
      Question i: <df[question_col]>
      Section: <df[sections_col]>
      MRMG Assessment: <df[mrmg_col]>
      (optional) Heading: <df[heading_col]>
      Modelling Team Response
      <blank space>

    Nothing else is added (no tables, no extra content).
    """
    # basic checks
    for col in [question_col, sections_col, mrmg_col]:
        if col not in df.columns:
            raise KeyError(f"Missing required column in df: '{col}'")

    os.makedirs(save_dir, exist_ok=True)
    out_path = os.path.join(save_dir, f"{model}_{impact}{('_' + scope) if scope else ''}.docx")

    doc = Document()

    # Title
    p = doc.add_paragraph()
    r = p.add_run("Validation Report (Template)")
    r.bold = True
    r.font.size = Pt(16)
    p.alignment = WD_ALIGN_PARAGRAPH.CENTER
    doc.add_paragraph()

    # Meta
    doc.add_paragraph(f"Model: {model} | Impact: {impact}{(' | Scope: ' + scope) if scope else ''}")
    doc.add_paragraph()

    # Rows
    for i, row in df.iterrows():
        # Question
        pq = doc.add_paragraph()
        _bold_run(pq, f"Question {i+1}: ", size=12)
        pq.add_run(str(row[question_col]).strip())

        # Section
        ps = doc.add_paragraph()
        _bold_run(ps, "Section: ")
        ps.add_run(str(row[sections_col]).strip())

        # MRMG Assessment
        pm = doc.add_paragraph()
        _bold_run(pm, "MRMG Assessment: ")
        pm.add_run(str(row[mrmg_col]).strip())

        # Optional Heading
        if heading_col and heading_col in df.columns:
            ph = doc.add_paragraph()
            _bold_run(ph, "Heading: ")
            ph.add_run(str(row.get(heading_col, "")).strip())

        # Modelling Team Response (blank)
        pmt = doc.add_paragraph()
        _bold_run(pmt, "Modelling Team Response", size=11)

        # blank lines as space for modeller to fill later
        for _ in range(max(0, blank_lines_under_mtr)):
            doc.add_paragraph()

        # spacer between questions
        doc.add_paragraph()

    doc.save(out_path)
    return out_path
