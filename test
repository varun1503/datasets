from docx import Document
from docx.oxml.ns import qn

def get_cell_text(cell):
    """
    Extracts and joins all paragraph text from a docx table cell.
    """
    text = ''
    for paragraph in cell.paragraphs:
        text += paragraph.text + '\n'
    return text.strip()

def parse_table_with_merged_cells(table):
    """
    Parses a docx table and handles vertically merged cells.
    """
    grid = []
    for row in table.rows:
        row_cells = []
        for cell in row.cells:
            row_cells.append(cell)
        grid.append(row_cells)

    # Dictionary to store the text of the starting cell of a merge
    merge_starters = {}

    parsed_rows = []
    for i, row in enumerate(grid):
        row_data = []
        for j, cell in enumerate(row):
            is_merged = False
            # Check for vertical merge
            for other_cell in grid[i-1][j].part.element.xpath(f'.//w:vMerge[@w:val="restart"]'):
                if cell._tc is other_cell.getparent().getparent():
                    merge_starters[(i,j)] = get_cell_text(cell)
                    row_data.append(get_cell_text(cell))
                    is_merged = True
                    break

            if not is_merged:
                 # Check if this cell is part of an ongoing merge
                is_part_of_merge = False
                for other_cell in cell.part.element.xpath('.//w:vMerge[@w:val="continue"]'):
                     if cell._tc is other_cell.getparent().getparent():
                        # Find the starting cell of this merge
                        for r in range(i - 1, -1, -1):
                            if (r,j) in merge_starters:
                                row_data.append(merge_starters[(r,j)])
                                is_part_of_merge = True
                                break
                
                if not is_part_of_merge:
                    row_data.append(get_cell_text(cell))


        parsed_rows.append(row_data)

    return parsed_rows
