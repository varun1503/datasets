from typing import List, Dict, Any
import logging

logger = logging.getLogger(__name__)

class RecursiveChunker(BaseChunker):
    """Implements recursive text splitting strategy for a list of documents."""

    def __init__(self, chunk_size: int = 1024, chunk_overlap: int = 256):
        self.chunk_size = chunk_size
        self.chunk_overlap = chunk_overlap
        self.splitter = RecursiveCharacterTextSplitter(
            chunk_size=chunk_size,
            chunk_overlap=chunk_overlap
        )

    def create_chunks(self, documents: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """Splits each document's content into chunks and retains metadata."""
        all_chunks = []
        try:
            for doc in documents:
                text = doc.get("page_content", "")
                metadata = doc.get("metadata", {})
                chunks = self.splitter.split_text(text)
                
                for chunk in chunks:
                    all_chunks.append({
                        "content": chunk,
                        "metadata": {**metadata, "chunk_size": self.chunk_size}
                    })
        except Exception as e:
            logger.error(f"Error in recursive chunking: {e}")
            raise

        return all_chunks
