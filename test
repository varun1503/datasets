def format_structured_output(ordered_content):
    id_to_node = {item['id']: dict(item) for item in ordered_content}
    for node in id_to_node.values():
        node['children'] = []

    for item in ordered_content:
        pid = item.get('parent_id')
        if pid and pid in id_to_node:
            id_to_node[pid]['children'].append(item)

    top_headings = [node for node in ordered_content if node['type'] == 'heading' and node.get('parent_id') is None]

    formatted_lines = []
    for heading in top_headings:
        formatted_lines.append(f"Heading: {heading['text']}")
        formatted_lines.extend(render_children(heading['children'], indent=1))

    return "\n".join(formatted_lines)


def render_children(children, indent=1):
    lines = []
    indent_space = "    " * indent

    for child in children:
        if child['type'] == 'subheading':
            lines.append(f"{indent_space}Subheading: {child['text']}")
            lines.extend(render_children(child.get('children', []), indent + 1))

        elif child['type'] == 'paragraph':
            lines.append(f"{indent_space}Paragraph: {child['text']}")

        elif child['type'] == 'table':
            lines.append(f"{indent_space}Table:")
            for row in child['data']:
                row_str = " | ".join(row)
                lines.append(f"{indent_space}    - {row_str}")

        elif child['type'] == 'image':
            lines.append(f"{indent_space}Image: {child['label']}")

    return lines
