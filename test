import streamlit as st
import requests
import os

API_BASE_URL = "http://127.0.0.1:8080"  # Update this if needed

st.set_page_config(page_title="RAG Chatbot", layout="wide")
st.title("RAG Chatbot")

# 3-column layout: Upload | Chat | Retrieved Docs
col1, col2, col3 = st.columns([1, 2, 2])

# --- Upload Section (Left Side) ---
with col1:
    st.header("1. Upload Document")

    uploaded_file = st.file_uploader("Upload a file (pdf, txt, docx)", type=["pdf", "txt", "docx"])
    index_id = st.text_input("Index ID", value="df101")
    chunking_type = st.selectbox("Chunking Type", ["recursive", "semantic", "automerge"])

    document_path = None

    if uploaded_file:
        with open(uploaded_file.name, "wb") as f:
            f.write(uploaded_file.getbuffer())
        document_path = os.path.abspath(uploaded_file.name)

    if st.button("Upload and Chunk Document"):
        if document_path and index_id:
            request_payload = {
                "document_path": document_path,
                "chunking_type": chunking_type,
                "index_id": index_id
            }
            response = requests.post(f"{API_BASE_URL}/upload/documents", json=request_payload)
            if response.status_code == 200:
                st.success("Document uploaded and chunked successfully!")
            else:
                st.error(f"Failed to upload document: {response.text}")
        else:
            st.warning("Upload a document and provide an index ID.")

# --- Chat Section (Center) ---
with col2:
    st.header("2. Chat with your Documents")

    if "chat_history" not in st.session_state:
        st.session_state.chat_history = []

    query = st.text_input("Enter your question")
    top_k = st.slider("Number of documents to retrieve", 1, 5, 3)

    generative_model_id = st.selectbox("Model ID", options=["1", "3"])
    index_id_chat = st.text_input("Index ID (for retrieval)", value="df101")

    if st.button("Ask"):
        if query and index_id_chat:
            request_payload = {
                "query": query,
                "top_k": top_k,
                "index_id": index_id_chat,
                "generative_model_id": generative_model_id
            }
            response = requests.post(f"{API_BASE_URL}/retrieve_and_generate", json=request_payload)
            if response.status_code == 200:
                result = response.json()
                st.session_state.chat_history.append((query, result["generated_response"], result["retrieved_documents"]))
            else:
                st.error(f"Failed to generate response: {response.text}")
        else:
            st.warning("Please enter a question and index ID.")

    # Show chat history
    for q, ans, _ in reversed(st.session_state.chat_history):
        st.markdown(f"**You:** {q}")
        st.markdown(f"**Bot:** {ans}")
        st.markdown("---")

# --- Retrieved Docs (Right Side) ---
with col3:
    st.header("Retrieved Documents")

    if "chat_history" in st.session_state:
        for _, _, docs in reversed(st.session_state.chat_history):
            for doc in docs:
                st.markdown(f"**Page {doc['page']} | Source: {doc['source']}**")
                st.write(doc["content"])
                st.markdown("---")
