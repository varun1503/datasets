import ast

insert_chunk = []

for i in range(len(parent_chunk)):
    parent_doc = parent_chunk[i][0]
    child_list = parent_doc.metadata.get('child_nodes', [])
    parent_q = {}

    # Build mapping of child_id -> quadruples
    for single_child in child_list:
        child_qudipals = [
            doc[0].metadata["quadruples"]
            for doc in final_chunk
            if single_child == doc[8].metadata.get("parent_node")
        ]
        # Flatten list if multiple matches
        flattened = [item for sublist in child_qudipals for item in sublist]
        parent_q[single_child] = flattened

    # Prepare input node and prune
    input_node = {"input_quadruples_dict": parent_q}
    pruned_prompt = prompts().pruning_prompt()
    pruned_kg = model_invoke().model_call("3", pruned_prompt, input_node)

    # Evaluate string to dict
    cc = pruned_kg.content.strip().removeprefix("```python").removesuffix("```")
    v = ast.literal_eval(cc)

    parent_doc.metadata.update({"qudipals": v})

    # Build insert_chunk from qudipals
    for key, value in v.items():
        matching_docs = [
            doc for doc in final_chunk
            if key in doc[0].metadata.get("doc_id", "")
        ]

        for doc in matching_docs:
            each_qudipals = {
                "metadata": dict(list(parent_doc.metadata.items())[:-1]),  # Remove last item
                "qudipals": value[0],
            }
            each_qudipals["metadata"]["content"] = parent_doc.page_content
            insert_chunk.append(each_qudipals)
