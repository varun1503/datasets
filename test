import os
import pandas as pd
from docx import Document
from docx.shared import Pt
from docx.enum.text import WD_ALIGN_PARAGRAPH

def build_template_from_df(
    df: pd.DataFrame,
    model: str,
    impact: str,
    scope: str = "",
    save_dir: str = "base"
) -> str:
    """
    Create a Validation Report template DOCX.
    The number of 'Question N' blocks is determined by the rows in df.
    
    Args:
        df: DataFrame containing mapping rows (each row = one Question).
        model: "Business" or "Marketing"
        impact: "C" (Critical), "M" (Moderate), "L" (Low)
        scope: e.g. "V" for Vendor or "" for none
        save_dir: folder where template will be saved
    
    Returns:
        Path to the generated .docx file
    """
    os.makedirs(save_dir, exist_ok=True)
    fname = f"{model}_{impact}{('_' + scope) if scope else ''}.docx"
    out_path = os.path.join(save_dir, fname)

    doc = Document()

    # Title
    p = doc.add_paragraph()
    run = p.add_run("Validation Report (Template)")
    run.font.size = Pt(16)
    run.bold = True
    p.alignment = WD_ALIGN_PARAGRAPH.CENTER
    doc.add_paragraph()

    # Metadata line
    doc.add_paragraph(f"Model: {model} | Impact: {impact}{(' | Scope: ' + scope) if scope else ''}")
    doc.add_paragraph()

    # Create Q blocks based on df rows
    for i in range(1, len(df) + 1):
        q = doc.add_paragraph()
        rq = q.add_run(f"Question {i}")
        rq.bold = True
        rq.font.size = Pt(12)

        tr = doc.add_paragraph()
        rr = tr.add_run("Team response:")
        rr.italic = True

        doc.add_paragraph()  # spacer

    doc.save(out_path)
    return out_path


# -------- Example usage --------
if __name__ == "__main__":
    # Load your mapping CSV
    df = pd.read_csv("mapping/Business_C.csv")

    # Build template with number of questions = len(df)
    path = build_template_from_df(df, model="Business", impact="C", scope="")
    print("Template saved at:", path)
