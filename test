from fastapi import FastAPI
from pydantic import BaseModel
from typing import List
from langchain.schema import Document

app = FastAPI()

# Simulated document retrieval function (Replace with actual retrieval logic)
def retrieve_documents(query: str, top_k: int) -> List[Document]:
    """
    Retrieve relevant documents based on the query.
    Replace this with actual retrieval logic.
    """
    return [
        Document(
            metadata={"source": "rag_data.pdf", "page": 9, "file_path": "C:\\Users\\vvaishy\\Documents\\hpt_rasa\\data\\rag_data.pdf"},
            page_content="Certainty around visa rules into the future, which I think is a benefit..."
        ),
        Document(
            metadata={"source": "rag_data.pdf", "page": 10, "file_path": "C:\\Users\\vvaishy\\Documents\\hpt_rasa\\data\\rag_data.pdf"},
            page_content="Barclays Emerging Payments Forum provides insights on..."
        )
    ][:top_k]  # Return only the top-K documents

# Define Pydantic Response Model
class DocumentModel(BaseModel):
    source: str
    page: int
    file_path: str
    content: str

class RetrieveResponse(BaseModel):
    retrieved_documents: List[DocumentModel]

@app.post("/retrieve", response_model=RetrieveResponse)
def retrieve_endpoint(query: str, top_k: int = 5):
    """
    API endpoint to retrieve relevant documents based on a query.
    """
    # Get retrieved documents
    documents = retrieve_documents(query, top_k)

    # Format documents into response structure
    formatted_documents = [
        DocumentModel(
            source=doc.metadata.get("source", "Unknown"),
            page=doc.metadata.get("page", -1),
            file_path=doc.metadata.get("file_path", ""),
            content=doc.page_content
        )
        for doc in documents
    ]

    return RetrieveResponse(retrieved_documents=formatted_documents)
