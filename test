import yaml
import pytest
from src.mdkcli.data.preprocessing.text_preprocess import read_df, train_test_splits
from src.mdkcli.services.hpt.optimizer import TextHPTOptimizer

# Fixture to load configuration
@pytest.fixture
def configs():
    with open("mdkcli/config/config.yml", "r") as f:
        config = yaml.safe_load(f)
    return config

# Test for configuration keys
def test_configuration(configs):
    """
    Validate that required keys are present in the configuration.
    """
    assert "num_epochs" in configs["model_type"]["text_config"]["text-hpt"]["optuna"]["hyperparameter_space"], "num_epochs missing in config"
    assert "batch_size" in configs["model_type"]["text_config"]["text-hpt"]["optuna"]["hyperparameter_space"], "batch_size missing in config"
    assert "learning_rate" in configs["model_type"]["text_config"]["text-hpt"]["optuna"]["hyperparameter_space"], "learning_rate missing in config"
    assert "weight_decay" in configs["model_type"]["text_config"]["text-hpt"]["optuna"]["hyperparameter_space"], "weight_decay missing in config"
    assert "hidden_dropout_prob" in configs["model_type"]["text_config"]["text-hpt"]["optuna"]["hyperparameter_space"], "hidden_dropout_prob missing in config"

# Data handler class
class Data:
    def test_text_data(self, path):
        """
        Reads data and splits it into train/test/validation sets.
        """
        dataframe = read_df(path)
        dataframe = dataframe.sample(frac=0.1)  # Sample 10% of the data
        train_df, test_df = train_test_splits(dataframe, test_size=0.2)
        train_df, validate_df = train_test_splits(train_df)
        return train_df, test_df, validate_df

# Fixture to initialize HPT optimizer
@pytest.fixture
def test_hpt_service_text(configs):
    """
    Initialize the Hyperparameter Tuning optimizer.
    """
    return TextHPTOptimizer(configs)

# Test for the HPT service initialization
def test_hpt_service_initialization(test_hpt_service_text):
    """
    Ensure the HPT service is initialized properly.
    """
    assert test_hpt_service_text is not None, "HPT service initialization failed"

# Test for running the study
def test_run_study(test_hpt_service_text, configs):
    """
    Run the HPT study and validate its execution.
    """
    # First, validate the configuration keys
    test_configuration(configs)  # Call test_configuration within test_run_study

    # Proceed with the study
    path = configs["data"]["text_data_path"]
    handler = Data()
    train_df, test_df, validation_df = handler.test_text_data(path)

    # Run the study
    test_hpt_service_text.run_study(train_df, test_df)

    # Assert that the best parameters are identified
    assert test_hpt_service_text.study.best_params is not None, "No best parameters found"
