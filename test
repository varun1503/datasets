import pandas as pd
import json, ast, re
import numpy as np

# ---------- parsing helpers ----------
def safe_json_loads(cell):
    """
    Safely parse a string that might look like a Python dict/list
    or a broken JSON with single quotes.
    """
    if isinstance(cell, (dict, list)):
        return cell  # already parsed
    
    if not isinstance(cell, str):
        return None
    
    # Try direct JSON load
    try:
        return json.loads(cell)
    except json.JSONDecodeError:
        pass
    
    # Try literal_eval (Python dict-like strings)
    try:
        return ast.literal_eval(cell)
    except Exception:
        pass
    
    # Fix common issues: replace single quotes with double quotes, escape \u
    fixed = re.sub(r"'", '"', cell)
    fixed = fixed.replace("\\u", "\\\\u")  # escape unicode
    
    try:
        return json.loads(fixed)
    except Exception:
        return None

# Strip common numbering patterns at the start:
#   "1 ", "1.2 ", "1.2.3 ", "1) ", "(1) ", "1- ", "1 - ", "1. Title", "3: Title"
_NUM_PREFIX_RX = re.compile(
    r"""^\s*               # leading spaces
        (?:?\d+(?:\.\d+)*?   # 1 or 1.2 or (1.2.3)
        [\s\.\:\-]*      # optional separators like '.', ')', ':', '-', spaces
        )                  # end group
        """,
    re.VERBOSE,
)

def remove_leading_number(s: str) -> str:
    if not isinstance(s, str):
        return ""
    return _NUM_PREFIX_RX.sub("", s).strip()

# ---------- main ----------
def add_section_from_retrieved(
    df: pd.DataFrame,
    column: str = "retrieved_results",
    out_num: str = "Section number",
    out_name: str = "sections",
    make_combined: bool = True,   # also create "Section" WITHOUT number
) -> pd.DataFrame:
    """
    From df[column] (JSON/list with dicts), take ONLY the first item and extract:
      - out_num: numeric prefix from heading (e.g., '7', '7.5', '1.2.3')
      - out_name: subheading if present else heading text, with leading numbers removed
      - Section (optional): same as out_name (no number)
    """

    def parse_first_item(cell):
        data = cell
        if isinstance(cell, str):
            data = safe_json_loads(cell)

        # take first dict if list; else dict; else empty
        item = data[0] if isinstance(data, list) and data else (data if isinstance(data, dict) else {})
        heading = str(item.get("heading", "") or "").strip()
        sub = str(item.get("subheading", "") or "").strip()
        if sub.lower() in {"none", "null"}:
            sub = ""

        # Extract number from heading (kept in out_num)
        m = re.match(r'^\s*([0-9]+(?:\.[0-9]+)*)\.?\s*(.*)$', heading)
        if m:
            num = m.group(1)
            heading_name = m.group(2).strip()
        else:
            num = ""
            heading_name = heading

        # Choose the display name (no numbers)
        # Priority: subheading (cleaned) else heading name (cleaned)
        name_raw = sub if sub else heading_name
        name = remove_leading_number(name_raw)

        return pd.Series({out_num: num, out_name: name})

    out = df.copy()
    out[[out_num, out_name]] = out[column].apply(parse_first_item)

    if make_combined:
        # "Section" is a clean, human-readable label WITHOUT the number
        out["Section"] = out[out_name].astype(str)

    return out
