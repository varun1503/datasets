import concurrent.futures
import logging
from tqdm import tqdm  # Assuming 'tada' meant 'tqdm'

from safechain.lcel import model
from toda import toda  # This still seems unclear â€“ is this a progress bar or a typo?

logger = logging.getLogger(__name__)


class concurrent_embedding:
    def __init__(self, model_idx: str):
        self.embedding_model = model(model_idx)

    def _get_embed(self, idx, chunk):
        try:
            raw_text_embeddings = self.embedding_model.embed_documents([chunk["content"]])
            return idx, raw_text_embeddings[0]
        except Exception as e:
            logger.error(f"Embedding failed for index {idx}: {e}")
            return idx, None  # Return None if failed

    def chunk_embedding(self, chunks_data):
        with concurrent.futures.ThreadPoolExecutor(max_workers=32) as executor:
            futures = [executor.submit(self._get_embed, idx, doc) for idx, doc in enumerate(chunks_data)]

            for future in tqdm(concurrent.futures.as_completed(futures), total=len(chunks_data), desc="Futures processing"):
                try:
                    idx, emb = future.result()
                    if emb is not None:
                        chunks_data[idx]["embedding"] = emb
                    else:
                        logger.warning(f"No embedding returned for index {idx}")
                except Exception as e:
                    logger.error(f"Error processing future: {e}")

        return chunks_data
