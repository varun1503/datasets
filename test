file_path = "/mnt/data/file-2C5TDub4zDjZYm4DsFFX77"
content = extract_ordered_docx_content(file_path, save_images=True)

for ctype, cdata in content:
    if ctype == "paragraph":
        print("üìÑ Paragraph:", cdata)
    elif ctype == "table":
        print("üìä Table:")
        for row in cdata:
            print("   ", row)
    elif ctype == "image":
        print("üñºÔ∏è Image:", cdat
from docx import Document
from docx.oxml.ns import qn
from docx.oxml import OxmlElement
import os

def extract_ordered_docx_content(file_path, save_images=False, image_output_dir='images'):
    doc = Document(file_path)
    body = doc._element.body
    ordered_content = []
    image_count = 0

    # Optional image saving
    if save_images and not os.path.exists(image_output_dir):
        os.makedirs(image_output_dir)

    # Prepare image mapping
    image_rels = {
        rel.rId: rel.target_part.blob
        for rel in doc.part._rels.values()
        if "image" in rel.target_ref
    }

    # Iterate through document XML
    for child in body.iterchildren():
        tag = child.tag

        # Paragraph
        if tag == qn('w:p'):
            texts = []
            for node in child.iter():
                if node.text:
                    texts.append(node.text)
            para_text = ''.join(texts).strip()
            if para_text:
                ordered_content.append(('paragraph', para_text))

        # Table
        elif tag == qn('w:tbl'):
            table_data = []
            tbl = OxmlElement("w:tbl")
            tbl._element = child
            rows = child.findall('.//w:tr')
            for row in rows:
                cells = row.findall('.//w:tc')
                row_data = []
                for cell in cells:
                    text = ''.join([t.text for t in cell.iter() if t.text])
                    row_data.append(text.strip())
                table_data.append(row_data)
            if table_data:
                ordered_content.append(('table', table_data))

    # Append image labels at the end
    for rel in doc.part._rels.values():
        if "image" in rel.target_ref:
            image_count += 1
            image_label = f"Image_{image_count}"
            ordered_content.append(('image', image_label))

            if save_images:
                ext = rel.target_ref.split('.')[-1]
                path = os.path.join(image_output_dir, f"{image_label}.{ext}")
                with open(path, "wb") as f:
                    f.write(rel.target_part.blob)

    return ordered_contenta)
