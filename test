from docx import Document

def merge_docx_files(input_files, output_file):
    """
    Merge multiple DOCX files into one.
    
    :param input_files: list of DOCX file paths to merge
    :param output_file: output DOCX file path
    """
    merged_doc = Document()

    for i, file in enumerate(input_files):
        sub_doc = Document(file)

        # Append each element from input DOCX into merged DOCX
        for element in sub_doc.element.body:
            merged_doc.element.body.append(element)

        # Add page break between documents except the last one
        if i < len(input_files) - 1:
            merged_doc.add_page_break()

    merged_doc.save(output_file)
    print(f"Merged DOCX saved at: {output_file}")


# Example usage
if __name__ == "__main__":
    input_files = ["doc1.docx", "doc2.docx"]  # your input files
    output_file = "merged_output.docx"
    merge_docx_files(input_files, output_file)    if prepend_docx_path and page_break_after_prepend:
        doc.add_page_break()

    # Title
    t = doc.add_paragraph()
    r = t.add_run("Validation Report (Template)")
    r.bold = True
    r.font.size = Pt(16)
    t.alignment = WD_ALIGN_PARAGRAPH.CENTER
    doc.add_paragraph()

    # Meta
    doc.add_paragraph(f"Model: {model} | Impact: {impact}{(' | Scope: ' + scope) if scope else ''}")
    doc.add_paragraph()

    # Rows
    for i, row in df.iterrows():
        # Question
        pq = doc.add_paragraph()
        _bold_run(pq, f"Question {i+1}: ", size=12)
        _normal_run(pq, str(row[question_col]).strip())

        # Section
        ps = doc.add_paragraph()
        _bold_run(ps, "Section: ")
        _normal_run(ps, str(row[sections_col]).strip())

        # Optional Heading
        if heading_col and heading_col in df.columns:
            ph = doc.add_paragraph()
            _bold_run(ph, "Heading: ")
            _normal_run(ph, str(row.get(heading_col, "")).strip())

        # MRMG Assessment (if present)
        if mrmg_col and mrmg_col in df.columns:
            pm = doc.add_paragraph()
            _bold_run(pm, "MRMG Assessment: ")
            _normal_run(pm, str(row.get(mrmg_col, "")).strip())

        # RFR
        if rfr_col in df.columns:
            _add_heading(doc, "RFR", size=12)
            _add_rfr_block(doc, row.get(rfr_col))

        # Findings
        if finding_col and finding_col in df.columns:
            _add_heading(doc, "Findings", size=12)
            lines = _as_finding_lines(row.get(finding_col))
            if lines:
                for line in lines:
                    p = doc.add_paragraph(style=None)
                    try:
                        p.style = doc.styles['List Bullet']  # bullet style if available
                    except Exception:
                        pass
                    _normal_run(p, line)
            else:
                _normal_run(doc.add_paragraph(), "(No findings provided)")

        # Modelling Team Response (space)
        pmt = doc.add_paragraph()
        _bold_run(pmt, "Modelling Team Response", size=11)
        for _ in range(max(0, blank_lines_under_mtr)):
            doc.add_paragraph()

        # spacer
        doc.add_paragraph()

    doc.save(out_path)
    return out_path
