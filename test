import re
from typing import List

RFR_RX  = re.compile(r"\bRFR\s*\d+\b", re.IGNORECASE)
# Handles: "Modeling/Modelling Team’s/Team's Response" and "Model team ready"
MODEL_RX = re.compile(
    r"\bModel(?:l?ing)?\s+Team(?:’s|'s)?\s+Response\b|\bModel\s+team\s+ready\b",
    re.IGNORECASE,
)

def format_rfr_blocks_as_strings(lines: List[str]) -> List[str]:
    """
    Returns: List[str], where each item is a block:
        RFR N:
        ref:
        ...
        modelling team response:
        ...
    """
    out: List[str] = []
    rfr_key = None
    section = None  # 'ref' or 'model'
    ref_buf: List[str] = []
    model_buf: List[str] = []

    def flush_block():
        nonlocal ref_buf, model_buf, rfr_key
        if rfr_key is None:
            return
        parts = [f"{rfr_key}:"]
        if ref_buf:
            parts.append("ref:")
            parts.extend(ref_buf)
        if model_buf:
            parts.append("modelling team response:")
            parts.extend(model_buf)
        out.append("\n".join(parts))
        ref_buf.clear()
        model_buf.clear()

    for raw in lines:
        line = (raw or "").strip()
        if not line:
            continue

        # New RFR starts → flush previous, begin a new block
        if RFR_RX.search(line):
            flush_block()
            rfr_key = line.strip()
            section = "ref"  # start collecting ref until we hit MODEL_RX
            continue

        # Inside an RFR: switch to model section on modeling marker
        if rfr_key is not None and MODEL_RX.search(line):
            section = "model"
            # include the marker line as part of the model section
            model_buf.append(line)
            continue

        # Append to current section
        if rfr_key is not None:
            if section == "model":
                model_buf.append(line)
            else:  # default to ref until marker appears
                ref_buf.append(line)

    # Flush the final block
    flush_block()
    return out
