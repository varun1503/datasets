import os
import logging
from typing import Dict, List, Any
from exceptions.loader import DataLoaderError  # Ensure correct import for exceptions

logger = logging.getLogger(__name__)

def load_document(path: str) -> Dict[str, List[Any]]:
    """Load documents from a specified path (file or folder)."""
    if not path:
        logger.error("Data path is not specified.")
        raise DataLoaderError("Data path must be provided.")

    data = {}

    try:
        if os.path.isdir(path):  # If the path is a folder
            logger.info(f"Loading documents from folder: {path}")
            for filename in sorted(os.listdir(path), reverse=True):
                file_path = os.path.join(path, filename)
                if filename.endswith(".pdf"):
                    data[filename] = _load_pdf(file_path)

        elif os.path.isfile(path) and path.endswith(".pdf"):  # If the path is a file
            logger.info(f"Loading single document: {path}")
            data[os.path.basename(path)] = _load_pdf(path)

        else:
            logger.warning(f"Unsupported file type or invalid path: {path}")

        return data

    except Exception as e:
        logger.error(f"Error in document loading: {e}")
        raise DataLoaderError(f"Failed to load documents: {str(e)}")

def _load_pdf(file_path: str) -> List[str]:
    """Load a PDF file and return its pages as a list of text (dummy implementation)."""
    try:
        logger.info(f"Processing PDF: {file_path}")
        # Placeholder logic for PDF extraction
        return [f"Page {i+1} content of {file_path}" for i in range(3)]  # Mocking 3 pages
    except Exception as e:
        logger.error(f"Failed to load PDF {file_path}: {e}")
        raise DataLoaderError(f"Error processing PDF: {file_path}")
