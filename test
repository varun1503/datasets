class preprocessing:
    def __init__(self):
        self.config = load_config()
        self.s3_object = S3Utils()

    def preprocess_content_chunks(self, content, max_chunk_len=5000):
        preprocess_chunk = []
        current_paragraph = ""
        current_source = content[0].get("source", None)
        current_heading = None
        current_subheading = None
        subsection = None
        section = None
        current_tables = []
        current_image_contexts = []
        current_caption = []
        tmrc_checklist = None
        last_was_heading = False  # True if last item was a heading/subheading

        def flush_chunk():
            nonlocal current_paragraph, current_tables, current_image_contexts, tmrc_checklist, current_caption
            if (current_paragraph.strip() or current_tables or current_image_contexts or tmrc_checklist or current_caption):
                chunk = {
                    "heading": current_heading,
                    "subheading": current_subheading,
                    "section": section,
                    "subsection": subsection,
                    "paragraph": current_paragraph.strip() if current_paragraph.strip() else None,
                    "table": current_tables if current_tables else None,
                    "image_context": current_image_contexts if current_image_contexts else None,
                    "caption": current_caption if current_caption else None,
                    "tmrc_checklist": tmrc_checklist if tmrc_checklist else None,
                    "Source": current_source
                }
                preprocess_chunk.append(chunk)
            # Reset for next chunk
            current_paragraph = ""
            current_tables = []
            current_image_contexts = []
            current_caption = []
            tmrc_checklist = None

        for item in content:
            item_type = item.get("type")
            current_source = item.get("source", None)

            # --- Heading Level 1 ---
            if item_type == "heading" and item.get("level") == 1:
                flush_chunk()
                current_heading = item.get("text")
                current_subheading = None
                section = item.get("section")
                subsection = None
                last_was_heading = True

            # --- Heading Level 2 ---
            elif item_type == "heading" and item.get("level") == 2:
                flush_chunk()
                current_subheading = item.get("text")
                subsection = item.get("section")
                last_was_heading = True

            # --- Paragraph ---
            elif item_type == "paragraph":
                text = item.get("text", "").strip()
                if not text:
                    continue
                # if len(current_paragraph + " " + text) > max_chunk_len:
                #     flush_chunk()
                current_paragraph += " " + text
                last_was_heading = False

            # --- Table ---
            elif item_type == "table":
                if last_was_heading and tmrc_checklist is None:
                    tmrc_checklist = item.get("data", [])
                    last_was_heading = False
                else:
                    current_tables.append(item.get("data", []))

            # --- Image ---
            elif item_type == "image":
                context = item.get("image_context", "")
                caption = item.get("caption", "")
                if caption and caption.strip():
                    current_caption.append(caption.strip())
                if context and context.strip():
                    current_image_contexts.append(context.strip())
                last_was_heading = False

        flush_chunk()

        # Post-processing: convert single-item lists to string, and empty lists to None
        for chunk in preprocess_chunk:
            for k in ["image_context", "caption", "table"]:
                if isinstance(chunk[k], list):
                    if not chunk[k]:
                        chunk[k] = None
                    elif len(chunk[k]) == 1:
                        chunk[k] = chunk[k][0]

        return preprocess_chunk
