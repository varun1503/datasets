# ---------- Column 2: Chat Area ----------
with col2:
    st.subheader("Chat")
    dummy_questions = ["What's your special skill?", "Tell me about yourself", "Which tools do you have access to?"]
    for q in dummy_questions:
        if st.button(q, key=q):
            st.session_state.user_query = q

    # Display chat history (from top to bottom)
    for entry in st.session_state.chat_history:
        st.markdown(f"**You:** {entry['query']}")
        st.markdown(f"**GPT-4.0:** {entry['response']}")
        st.markdown("---")

    # Input box fixed at the bottom
    with st.form("chat_form", clear_on_submit=True):
        query = st.text_input("Ask a question", key="query_input")
        submitted = st.form_submit_button("Send")
        
        if submitted and query:
            # Send request to your API
            request_payload = {
                "query": query,
                "top_k": st.session_state.top_k,
                "index_id": st.session_state.index_id,
                "generative_model_id": st.session_state.model_id
            }

            try:
                response = requests.post(f"{API_BASE_URL}/retrieve_and_generate", json=request_payload)
                if response.status_code == 200:
                    result = response.json()
                    # Store both query and response in chat
                    st.session_state.chat_history.insert(0, {
                        "query": query,
                        "response": result.get("generated_response", "No response")
                    })

                    # Save retrieved documents for right panel
                    st.session_state.retrieved_docs = result.get("retrieved_documents", [])

                else:
                    st.error(f"API Error: {response.text}")
            except Exception as e:
                st.error(f"Failed to contact API: {e}")
