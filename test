def get_generation(self):
    best_community = self.find_best_community(community_names_list, community_summary_list)
    best_community_graph = community_graph_list[best_community[1][0]]

    intent = self.intent_extract_func(self.query)

    selected_nodes_matching_with_intent = self.intent_matching(best_community_graph, intent, 0.4)
    retrieved_nodes = self.select_subgraph(best_community_graph, selected_nodes_matching_with_intent)

    result = self.answer_generation(retrieved_nodes)
    answer_plan = self.reasoning_generation(best_community_graph, self.query, result.content)
    final_answer = self.final_answer_generation(answer_plan)

    # Build retrieved subgraph tree
    retrieved_sub_tree = nx.DiGraph()
    for node in selected_nodes_matching_with_intent:
        dfs_tree = nx.dfs_tree(best_community_graph, source=node, depth_limit=3)
        retrieved_sub_tree = nx.compose(retrieved_sub_tree, dfs_tree)

    # Visualize and convert to base64
    fig_image_base64 = self.visualize_retrieved_tree(best_community_graph, retrieved_sub_tree)

    # Return only serializable data
    return {
        "intent": str(intent),
        "best_community": str(best_community[0]),
        "retrieved_nodes": [str(node) for node in retrieved_nodes],
        "answer_plan": answer_plan.content,
        "final_answer": final_answer.content,
        "selected_nodes_matching_with_intent": [str(node) for node in selected_nodes_matching_with_intent],
        "fig_image_base64": fig_image_base64
    }
