from langchain.schema import Document  # or adjust based on your LangChain version

results = []

for row in rows:
    db_vector = row.vector
    if db_vector:
        score = self.compute_cosine_similarity(query_vector, db_vector)

        # Create the Document object
        doc = Document(
            page_content=row.bdy_blob_tx,
            metadata=row.mtda_val_tx or {}
        )
        doc.row_id = str(row.row_id)  # attach row_id as attribute

        results.append((doc, score))
        print(row.bdy_blob_tx)

return results
