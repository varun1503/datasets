import pandas as pd

def balance_reference_by_length(current_df: pd.DataFrame, reference_df: pd.DataFrame, label_column: str) -> pd.DataFrame:
    """
    Balances the reference dataframe so that:
    1. Its total length matches the current dataframe.
    2. Each label in the reference dataframe is equally represented.
    
    Args:
        current_df (pd.DataFrame): The current dataframe.
        reference_df (pd.DataFrame): The reference dataframe containing more rows.
        label_column (str): The name of the column containing the labels.

    Returns:
        pd.DataFrame: A balanced reference dataframe.
    """
    target_length = len(current_df)
    labels = reference_df[label_column].unique()
    num_labels = len(labels)
    
    # Calculate the target number of samples per label
    samples_per_label = target_length // num_labels
    
    # Handle any remaining rows after division
    extra_samples = target_length % num_labels
    
    balanced_reference = pd.DataFrame()
    
    for i, label in enumerate(labels):
        label_data = reference_df[reference_df[label_column] == label]
        if i < extra_samples:
            # Add one extra sample for the first 'extra_samples' labels
            sampled_data = label_data.sample(n=samples_per_label + 1, random_state=42)
        else:
            sampled_data = label_data.sample(n=samples_per_label, random_state=42)
        
        balanced_reference = pd.concat([balanced_reference, sampled_data], ignore_index=True)
    
    return balanced_reference
