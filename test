from docx import Document
from docx.shared import Pt, Inches, RGBColor
from docx.enum.text import WD_ALIGN_PARAGRAPH
from docx.enum.table import WD_TABLE_ALIGNMENT, WD_ALIGN_VERTICAL
from docx.enum.section import WD_SECTION
from docx.oxml import OxmlElement
from docx.oxml.ns import qn
import os
import json
import ast
from typing import Optional, Any
import pandas as pd


# ---------- helpers ----------
def _bold_run(p, text, size=11):
    r = p.add_run(text)
    r.bold = True
    r.font.size = Pt(size)
    return r

def _normal_run(p, text, size=11):
    r = p.add_run(text)
    r.font.size = Pt(size)
    return r

def safe_json_loads(cell: Any):
    if isinstance(cell, (dict, list)) or cell is None:
        return cell
    if not isinstance(cell, str):
        return cell
    try:
        return json.loads(cell)
    except Exception:
        pass
    try:
        return ast.literal_eval(cell)
    except Exception:
        return cell


# ---------- XML helpers ----------
def _set_cell_bg(cell, hex_color: str = "F2F2F2"):
    tc_pr = cell._tc.get_or_add_tcPr()
    shd = tc_pr.find(qn('w:shd'))
    if shd is None:
        shd = OxmlElement('w:shd')
        tc_pr.append(shd)
    shd.set(qn('w:fill'), hex_color)
    shd.set(qn('w:val'), 'clear')
    shd.set(qn('w:color'), 'auto')

def _force_table_borders(table, color="000000", size=8):
    tbl = table._tbl
    tblPr = tbl.tblPr or OxmlElement('w:tblPr')
    if tbl.tblPr is None:
        tbl.append(tblPr)
    borders = tblPr.find(qn('w:tblBorders'))
    if borders is None:
        borders = OxmlElement('w:tblBorders')
        tblPr.append(borders)

    for edge in ['top', 'left', 'bottom', 'right', 'insideH', 'insideV']:
        el = borders.find(qn(f'w:{edge}'))
        if el is None:
            el = OxmlElement(f'w:{edge}')
            borders.append(el)
        el.set(qn('w:val'), 'single')
        el.set(qn('w:sz'), str(size))
        el.set(qn('w:space'), '0')
        el.set(qn('w:color'), color)


# ---------- Cover page ----------
def add_cover_page(
    doc: Document,
    *,
    model_id: str,
    model_version: str,
    model_name: str,
    report_date: str,
    title_text: str = "Model Validation Report"
):
    title = doc.add_paragraph()
    title.alignment = WD_ALIGN_PARAGRAPH.CENTER
    tr = title.add_run(title_text)
    tr.bold = True
    tr.font.size = Pt(20)

    doc.add_paragraph()

    chips = [
        f"Model ID: {model_id}",
        f"Model Version: {model_version}",
        f"Model Name: {model_name}",
        f"Date of Report Generation: {report_date}",
    ]
    t = doc.add_table(rows=1, cols=len(chips))
    t.alignment = WD_TABLE_ALIGNMENT.CENTER
    _force_table_borders(t)
    for cell, txt in zip(t.rows[0].cells, chips):
        _set_cell_bg(cell, "D9D9D9")
        para = cell.paragraphs[0]
        para.alignment = WD_ALIGN_PARAGRAPH.CENTER
        r = para.add_run(txt)
        r.bold = True
        r.font.size = Pt(11)

    doc.add_section(WD_SECTION.NEW_PAGE)


# ---------- RFR ----------
def _add_rfr_block(doc: Document, rfr_obj: Any):
    rfr_obj = safe_json_loads(rfr_obj)
    if not rfr_obj:
        _normal_run(doc.add_paragraph(), "(No RFR provided)")
        return
    if isinstance(rfr_obj, dict):
        for k, v in rfr_obj.items():
            p_q = doc.add_paragraph()
            _bold_run(p_q, f"{str(k).strip()}: ", size=11)
            p_a = doc.add_paragraph()
            _bold_run(p_a, "Response: ", size=11)
            _normal_run(p_a, str(v).strip())
    else:
        _normal_run(doc.add_paragraph(), str(rfr_obj).strip())


# ---------- Findings ----------
def _format_header_cell(cell):
    cell.vertical_alignment = WD_ALIGN_VERTICAL.CENTER
    for p in cell.paragraphs:
        p.alignment = WD_ALIGN_PARAGRAPH.CENTER
        for r in p.runs:
            r.font.bold = True
            r.font.color.rgb = RGBColor(255, 255, 255)
            r.font.size = Pt(11)

def _add_findings_table(doc: Document, findings_df: Optional[pd.DataFrame]):
    if findings_df is None or len(findings_df) == 0:
        return

    # caption
    cap = doc.add_paragraph("Summary of Findings")
    cap.alignment = WD_ALIGN_PARAGRAPH.CENTER
    cap.runs[0].bold = True
    cap.runs[0].font.size = Pt(12)

    # table
    table = doc.add_table(rows=1, cols=4)
    table.alignment = WD_TABLE_ALIGNMENT.CENTER
    _force_table_borders(table, "000000")

    hdr = table.rows[0].cells
    hdr[0].text = "IMVP Question"
    hdr[1].text = "Finding Impact Category"
    hdr[2].text = "Finding Details"
    hdr[3].text = "Finding Status"
    for cell in hdr:
        _set_cell_bg(cell, "000000")
        _format_header_cell(cell)

    for _, r in findings_df.iterrows():
        row_cells = table.add_row().cells
        row_cells[0].text = str(r.get("IMVP question", "")).strip()
        row_cells[1].text = str(r.get("Finding Impact Category", "")).strip()
        row_cells[2].text = str(r.get("Finding Details", "")).strip()
        row_cells[3].text = str(r.get("Finding Status", "")).strip()

    doc.add_paragraph()


# ---------- Main builder ----------
def build_simple_template(
    df: pd.DataFrame,
    model: str,
    impact: str,
    prepend_docx_path: str,
    save_dir: str = "base",
    *,
    model_id: str,
    model_version: str,
    model_name: str,
    report_date: str,
    findings_df: Optional[pd.DataFrame] = None,
    question_col: str = "text",
    sections_col: str = "sections",
    rfr_col: str = "RFR",
    blank_lines_under_mtr: int = 2
) -> str:

    os.makedirs(save_dir, exist_ok=True)
    out_path = os.path.join(save_dir, f"{model}_{impact}.docx")

    # --- 1. Create new doc with cover ---
    doc = Document()
    add_cover_page(
        doc,
        model_id=model_id,
        model_version=model_version,
        model_name=model_name,
        report_date=report_date,
    )

    # --- 2. Append all content from prepend doc ---
    prepend = Document(prepend_docx_path)
    for element in prepend.element.body:
        doc.element.body.append(element)

    doc.add_section(WD_SECTION.NEW_PAGE)

    # --- 3. Findings ---
    _add_findings_table(doc, findings_df)

    # --- 4. Q&A + RFR ---
    for i, row in df.iterrows():
        pq = doc.add_paragraph()
        _bold_run(pq, f"Question {i+1}: ", size=12)
        _normal_run(pq, str(row[question_col]).strip())
        doc.add_paragraph()

        ps = doc.add_paragraph()
        _bold_run(ps, "Section: ")
        _normal_run(ps, str(row[sections_col]).strip())
        doc.add_paragraph()

        if rfr_col in df.columns:
            _bold_run(doc.add_paragraph(), "RFR", size=12)
            _add_rfr_block(doc, row.get(rfr_col))

        pmt = doc.add_paragraph()
        _bold_run(pmt, "Modelling Team Response", size=11)
        for _ in range(max(0, blank_lines_under_mtr)):
            doc.add_paragraph()
        doc.add_paragraph()

    doc.save(out_path)
    return out_path
