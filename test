def build_nested_structure_from_flat_list(flat_list):
    """
    Convert flat list with parent_id and child_ids into nested dict format.
    Returns the top-level sections (headings) with nested content.
    """
    id_to_node = {item['id']: dict(item, children=[]) for item in flat_list}

    # Attach children to their respective parents
    for node in id_to_node.values():
        parent_id = node.get('parent_id')
        if parent_id and parent_id in id_to_node:
            id_to_node[parent_id]['children'].append(node)

    # Return only root-level nodes (which have no parent)
    root_nodes = [node for node in id_to_node.values() if not node.get('parent_id')]
    return root_nodes
def format_nested_structure(nodes, indent=0):
    lines = []
    for node in nodes:
        prefix = "    " * indent
        if node['type'] == 'heading':
            lines.append(f"{prefix}🔷 Heading (Level {node['level']}): {node['text']}")
            if node.get('children'):
                lines.extend(format_nested_structure(node['children'], indent + 1))
        elif node['type'] == 'paragraph':
            lines.append(f"{prefix}📄 Paragraph: {node['text']}")
        elif node['type'] == 'table':
            lines.append(f"{prefix}📊 Table:")
            for row in node['data']:
                lines.append(f"{prefix}    | " + " | ".join(row))
        elif node['type'] == 'image':
            lines.append(f"{prefix}🖼️ Image: {node['label']}")
    return lines
