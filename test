from docx import Document
from docx.oxml.ns import qn
import os

# Define WordprocessingML XML namespace
NSMAP = {'w': 'http://schemas.openxmlformats.org/wordprocessingml/2006/main'}

def extract_ordered_docx_content(file_path, save_images=False, image_output_dir='images'):
    doc = Document(file_path)
    body = doc._element.body
    ordered_content = []
    image_count = 0

    # Prepare image directory
    if save_images:
        os.makedirs(image_output_dir, exist_ok=True)

    # Walk through content in order
    for child in body.iterchildren():
        tag = child.tag

        # -------- Paragraph --------
        if tag == qn('w:p'):
            texts = []
            for node in child.iter():
                if node.text:
                    texts.append(node.text)
            para_text = ''.join(texts).strip()
            if para_text:
                ordered_content.append(('paragraph', para_text))

        # -------- Table --------
        elif tag == qn('w:tbl'):
            table_data = []
            rows = child.findall('.//w:tr', namespaces=NSMAP)
            for row in rows:
                cells = row.findall('.//w:tc', namespaces=NSMAP)
                row_data = []
                for cell in cells:
                    text = ''.join(t.text for t in cell.iter() if t.text)
                    row_data.append(text.strip())
                table_data.append(row_data)
            ordered_content.append(('table', table_data))

    # -------- Images (handled separately) --------
    for rel in doc.part._rels.values():
        if "image" in rel.target_ref:
            image_count += 1
            image_label = f"Image_{image_count}"
            ordered_content.append(('image', image_label))

            if save_images:
                ext = rel.target_ref.split('.')[-1]
                path = os.path.join(image_output_dir, f"{image_label}.{ext}")
                with open(path, "wb") as f:
                    f.write(rel.target_part.blob)

    return ordered_content
