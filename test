from docx import Document
from docx.text.paragraph import Paragraph
from docx.oxml import OxmlElement
import re, json, ast
import pandas as pd

# ------- helpers -------
def _norm(s): return re.sub(r"\s+", " ", (s or "")).strip().lower()

def _insert_before(p: Paragraph, text=""):
    new_p = OxmlElement("w:p")
    p._p.addprevious(new_p)
    q = Paragraph(new_p, p._parent)
    if text: q.add_run(text)
    return q

def _insert_after(p: Paragraph, text=""):
    new_p = OxmlElement("w:p")
    p._p.addnext(new_p)
    q = Paragraph(new_p, p._parent)
    if text: q.add_run(text)
    return q

def _delete_range(paragraphs, i_from, i_to):
    if i_from is None or i_to is None or i_from > i_to: return
    for k in range(i_to, i_from-1, -1):
        elm = paragraphs[k]._element
        elm.getparent().remove(elm)

def _safe_dict(x):
    if isinstance(x, dict): return x
    if isinstance(x, str):
        s = x.strip()
        if not s: return {}
        try: return json.loads(s)
        except Exception:
            try: return ast.literal_eval(s)
            except Exception: return {}
    return {}

def _snum(text):  # "S2" if present, else ""
    m = re.search(r"\bS\s*(\d+)\b", text or "", re.IGNORECASE)
    return f"S{m.group(1)}" if m else ""

def _looks_like_test(p):
    return bool(re.search(r"\btest\b", _norm(p.text)))

# ------- main -------
def insert_rfr_and_mrmg_blocks(
    doc_path: str,
    df: pd.DataFrame,
    output_path: str,
    tag_col: str = "text",
    rfr_col: str = "rfr_value",          # dict: { "Challenge S# ...": "MTR ..." }
    mrmg_col: str = "MRMG_Assessment",   # str
):
    """
    For each df row:
      - Find the section anchored by df[tag_col] (e.g., "Test S2")
      - Preferred insertion anchor: just BEFORE "MRMG Evaluation" in that section
        Fallback: right AFTER "Modelling/Modeling Team Response" heading
        Else: end of that Test section
      - Clear any existing RFR (Challenge.../Modeling Team Response...) and MRMG Assessment in that slot
      - Insert RFR pairs first, then MRMG Assessment
      - Skip RFR if rfr dict is empty or missing
    """
    doc = Document(doc_path)

    for _, row in df.iterrows():
        tag = str(row.get(tag_col, "") or "").strip()
        assess = str(row.get(mrmg_col, "") or "").strip()
        rfr_dict = _safe_dict(row.get(rfr_col, {}))

        if not tag:
            continue  # need a tag to locate the section

        # 1) locate the "Test ..." anchor (or fallback by S#)
        tag_norm = _norm(tag)
        paras = doc.paragraphs
        start_idx = next((i for i,p in enumerate(paras) if tag_norm in _norm(p.text)), None)
        if start_idx is None:
            sn = _snum(tag)
            if sn:
                start_idx = next((i for i,p in enumerate(paras) if sn.lower() in _norm(p.text)), None)
        if start_idx is None:
            continue  # can't find section for this row

        # 2) section end = next "Test ..." or doc end
        next_test = None
        for j in range(start_idx+1, len(paras)):
            if _looks_like_test(paras[j]):
                next_test = j
                break
        section_end = next_test if next_test is not None else len(paras)

        # 3) find MTR and MRMG Evaluation (no strict S# requirement)
        mtr_idx = None
        eval_idx = None
        for j in range(start_idx+1, section_end):
            t = _norm(paras[j].text)
            if mtr_idx is None and ("modelling team response" in t or "modeling team response" in t):
                mtr_idx = j
            if eval_idx is None and "mrmg evaluation" in t:
                eval_idx = j
            if mtr_idx is not None and eval_idx is not None:
                break

        # 4) choose anchor (insert BEFORE this paragraph)
        if eval_idx is not None:
            anchor_before = paras[eval_idx]
        elif mtr_idx is not None:
            # create a blank right after MTR heading to anchor
            anchor_before = _insert_after(paras[mtr_idx])
        else:
            base = paras[section_end-1] if section_end > start_idx+1 else paras[start_idx]
            anchor_before = _insert_after(base)

        # 5) clear any existing RFR & MRMG Assessment between MTR (or start) and Eval (or section_end)
        scan_from = mtr_idx if mtr_idx is not None else start_idx
        scan_to = (eval_idx-1) if eval_idx is not None else (section_end-1)
        # collect ranges to delete: headings that look like Challenge..., Modeling Team Response..., MRMG Assessment...
        kill_ranges = []
        i = scan_from + 1
        while i <= scan_to and i < len(doc.paragraphs):
            txt = _norm(doc.paragraphs[i].text)
            if (txt.startswith("challenge") or
                txt.startswith("modeling team response") or
                txt.startswith("modelling team response") or
                txt.startswith("mrmg assessment")):
                # delete heading + next line as its body (if present)
                start_del = i
                end_del = min(i+1, len(doc.paragraphs)-1)
                kill_ranges.append((start_del, end_del))
                i = end_del + 1
                continue
            i += 1
        # perform deletions
        for a,b in reversed(kill_ranges):
            _delete_range(doc.paragraphs, a, b)

        # refresh refs after deletion
        paras = doc.paragraphs
        # re-point anchor if needed (best effort; if it moved, find the first paragraph whose text matches the old anchor text)
        # If anchor_before is now detached, fall back to last paragraph
        try:
            _ = anchor_before._p  # access to check it still exists
        except Exception:
            anchor_before = paras[min(eval_idx, len(paras)-1)] if eval_idx is not None else paras[-1]

        # 6) insert RFR (if present): for each dict item -> Challenge … + Modeling Team Response …
        if rfr_dict:
            # preserve item order if it's an OrderedDict-like; else normal dict order (Py3.7+ preserves insertion)
            for ch, resp in rfr_dict.items():
                ch_heading = ch.strip() if ch else "Challenge"
                # If key doesn't start with "Challenge", prefix it for clarity
                if not _norm(ch_heading).startswith("challenge"):
                    ch_heading = f"Challenge {ch_heading}"

                head = _insert_before(anchor_before, ch_heading)
                if head.runs: head.runs[0].bold = True
                _insert_before(anchor_before, str(resp or "").strip())
                _insert_before(anchor_before, "")  # spacer after each pair

        # 7) insert MRMG Assessment (if provided)
        if assess:
            head = _insert_before(anchor_before, "MRMG Assessment")
            if head.runs: head.runs[0].bold = True
            _insert_before(anchor_before, assess)
            _insert_before(anchor_before, "")  # spacer

    doc.save(output_path)
    print(f"✅ Wrote: {output_path}")


insert_rfr_and_mrmg_blocks(
    doc_path="input.docx",
    df=df,                     # must have columns: text, MRMG_Assessment, rfr_value
    output_path="output.docx",
    tag_col="text",
    rfr_col="rfr_value",
    mrmg_col="MRMG_Assessment",
)
