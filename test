import concurrent.futures
from tqdm import tqdm
import logging

logger = logging.getLogger(__name__)
gpickle = createGpicklefile()

def process_chunk(index, chunk):
    try:
        # Step 1: Get embedding
        emb = emb_model_invoke().embed_document(chunk["content"])
        chunk["embedding"] = emb

        # Step 2: Graph processing
        merged_graph = gpickle.get_merged_graph_cluster_single(chunk["content"])
        quadruples = gpickle.get_qudruples_single(merged_graph)
        community, triples = gpickle.extract_communities(quadruples)

        chunk["community"] = community
        chunk["triple"] = triples

        return index, chunk

    except Exception as e:
        logger.error(f"Error processing chunk at index {index}: {e}")
        return index, None
with concurrent.futures.ThreadPoolExecutor(max_workers=10) as executor:
    futures = [
        executor.submit(process_chunk, idx, chunk)
        for idx, chunk in enumerate(chunks_data)
    ]

    for future in tqdm(concurrent.futures.as_completed(futures), total=len(chunks_data), desc="Processing chunks"):
        idx, result = future.result()
        if result:
            chunks_data[idx] = result  # update only if success
