# Step 3: Analyze contributing words for outliers
for idx, label in enumerate(outlier_labels):
    if label == -1:  # Outliers are labeled as -1
        print(f"\nOutlier Sentence: {texts[idx]}")
        
        # Get the TF-IDF scores for the sentence
        tfidf_scores = tfidf_matrix[idx].toarray().flatten()
        
        # Map scores to words
        word_scores = {feature_names[i]: tfidf_scores[i] for i in range(len(feature_names)) if tfidf_scores[i] > 0}
        
        # Sort words by their TF-IDF scores (descending)
        sorted_words = sorted(word_scores.items(), key=lambda x: x[1], reverse=True)
        
        # Display contributing words
        print("Contributing Words (sorted by TF-IDF score):")
        for word, score in sorted_words:
            print(f"  {word}: {score:.4f}")
