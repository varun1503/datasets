# pdf_text_extractor.py
# pip install pdfminer.six

import os
from pdfminer.high_level import extract_text
from pdfminer.layout import LAParams


class PDFTextExtractor:
    """
    A class to extract text from PDF files and save them as .txt files.
    """

    def __init__(self, save_dir: str):
        """
        Initialize with a directory where extracted text files will be saved.
        """
        self.save_dir = save_dir
        os.makedirs(save_dir, exist_ok=True)

    @staticmethod
    def list_file_paths(folder_path: str) -> list[str]:
        """
        Recursively lists all PDF file paths in the folder (excluding checkpoints).
        """
        file_paths = []
        for root, _, files in os.walk(folder_path):
            for file in files:
                if "checkpoint" not in file.lower() and file.lower().endswith(".pdf"):
                    file_paths.append(os.path.join(root, file))
        return file_paths

    def pdf_to_text(self, pdf_path: str) -> str:
        """
        Extracts text from a single PDF file and saves it to a corresponding .txt file.
        """
        try:
            text = extract_text(pdf_path, laparams=LAParams())
        except Exception as e:
            print(f"[ERROR] Failed to extract {pdf_path}: {e}")
            return ""

        path_parts = os.path.normpath(pdf_path).split(os.sep)
        # Example: /data/letters/abc.pdf → save_dir/letters_abc.txt
        new_filename = "_".join(path_parts[-2:]) + ".txt"
        output_path = os.path.join(self.save_dir, new_filename)

        with open(output_path, "w", encoding="utf-8") as f:
            f.write(text)

        print(f"[OK] Extracted → {output_path}")
        return output_path

    def pdf_to_text_batch(self, folder_path: str):
        """
        Extracts text from all PDFs in the folder and saves them in the save_dir.
        """
        file_paths = self.list_file_paths(folder_path)
        if not file_paths:
            print("[INFO] No PDF files found.")
            return

        for pdf_path in file_paths:
            self.pdf_to_text(pdf_path)

        print(f"[DONE] Batch processing completed for {len(file_paths)} files.")


# ----------------------------- example usage -----------------------------
if __name__ == "__main__":
    folder_path = ""  # Path to your folder containing PDFs
    save_dir = ""     # Path to save extracted text files

    extractor = PDFTextExtractor(save_dir)
    extractor.pdf_to_text_batch(folder_path)
